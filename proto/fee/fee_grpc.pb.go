// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: proto/fee.proto

package fee

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChainFeeService_GetSupportChains_FullMethodName = "/dapplink.fee.ChainFeeService/getSupportChains"
	ChainFeeService_GetFeeByChain_FullMethodName    = "/dapplink.fee.ChainFeeService/getFeeByChain"
)

// ChainFeeServiceClient is the client API for ChainFeeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChainFeeServiceClient interface {
	GetSupportChains(ctx context.Context, in *SupportChainsRequest, opts ...grpc.CallOption) (*SupportChainsResponse, error)
	GetFeeByChain(ctx context.Context, in *ChainFeeRequest, opts ...grpc.CallOption) (*ChainFeeResponse, error)
}

type chainFeeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChainFeeServiceClient(cc grpc.ClientConnInterface) ChainFeeServiceClient {
	return &chainFeeServiceClient{cc}
}

func (c *chainFeeServiceClient) GetSupportChains(ctx context.Context, in *SupportChainsRequest, opts ...grpc.CallOption) (*SupportChainsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupportChainsResponse)
	err := c.cc.Invoke(ctx, ChainFeeService_GetSupportChains_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainFeeServiceClient) GetFeeByChain(ctx context.Context, in *ChainFeeRequest, opts ...grpc.CallOption) (*ChainFeeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChainFeeResponse)
	err := c.cc.Invoke(ctx, ChainFeeService_GetFeeByChain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChainFeeServiceServer is the server API for ChainFeeService service.
// All implementations should embed UnimplementedChainFeeServiceServer
// for forward compatibility.
type ChainFeeServiceServer interface {
	GetSupportChains(context.Context, *SupportChainsRequest) (*SupportChainsResponse, error)
	GetFeeByChain(context.Context, *ChainFeeRequest) (*ChainFeeResponse, error)
}

// UnimplementedChainFeeServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChainFeeServiceServer struct{}

func (UnimplementedChainFeeServiceServer) GetSupportChains(context.Context, *SupportChainsRequest) (*SupportChainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportChains not implemented")
}
func (UnimplementedChainFeeServiceServer) GetFeeByChain(context.Context, *ChainFeeRequest) (*ChainFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeeByChain not implemented")
}
func (UnimplementedChainFeeServiceServer) testEmbeddedByValue() {}

// UnsafeChainFeeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChainFeeServiceServer will
// result in compilation errors.
type UnsafeChainFeeServiceServer interface {
	mustEmbedUnimplementedChainFeeServiceServer()
}

func RegisterChainFeeServiceServer(s grpc.ServiceRegistrar, srv ChainFeeServiceServer) {
	// If the following call pancis, it indicates UnimplementedChainFeeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChainFeeService_ServiceDesc, srv)
}

func _ChainFeeService_GetSupportChains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupportChainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainFeeServiceServer).GetSupportChains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainFeeService_GetSupportChains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainFeeServiceServer).GetSupportChains(ctx, req.(*SupportChainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainFeeService_GetFeeByChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainFeeServiceServer).GetFeeByChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainFeeService_GetFeeByChain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainFeeServiceServer).GetFeeByChain(ctx, req.(*ChainFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChainFeeService_ServiceDesc is the grpc.ServiceDesc for ChainFeeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChainFeeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dapplink.fee.ChainFeeService",
	HandlerType: (*ChainFeeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getSupportChains",
			Handler:    _ChainFeeService_GetSupportChains_Handler,
		},
		{
			MethodName: "getFeeByChain",
			Handler:    _ChainFeeService_GetFeeByChain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/fee.proto",
}
